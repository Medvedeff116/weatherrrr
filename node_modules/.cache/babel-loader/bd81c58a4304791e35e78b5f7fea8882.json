{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pasha\\\\WebstormProjects\\\\weathertop\\\\src\\\\App.js\";\nimport React from 'react';\nimport { Cities } from './components/Cities';\nimport { WeatherDisplay } from './components/WeatherDisplay';\nimport { Loader } from './components/Loader';\nimport { RequestError } from './components/RequestError';\nimport './App.css';\nimport Modal from './Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCityClick = this.handleCityClick.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSearchBtnClick = this.handleSearchBtnClick.bind(this);\n    this.handleDeleteCityBtnClick = this.handleDeleteCityBtnClick.bind(this);\n    this.handleLocationClick = this.handleLocationClick.bind(this);\n    this.validate = this.validate.bind(this);\n    this.fetchDataByGeo = this.fetchDataByGeo.bind(this);\n    this.geoLocation = this.geoLocation.bind(this);\n    this.state = {\n      cities: localStorage.getItem('cities') ? JSON.parse(localStorage.getItem('cities')) : [],\n      activeCityId: null,\n      value: '',\n      searchErr: '',\n      weatherDataByGeo: null,\n      loading: false,\n      errGeo: null\n    };\n  } //Делает запрос на API по значениям координат, полученных из navigator.location\n\n\n  fetchDataByGeo(latitude, longitude) {\n    const APPID = 'ef598dd48091a3a2eb6a63ef6c4d75b2';\n    const URL = 'https://api.openweathermap.org/data/2.5/weather?lat=' + latitude + '&lon=' + longitude + `&units=metric&lang=ru&APPID=${APPID}`;\n    this.setState({\n      loading: true\n    });\n    fetch(URL).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw response.status;\n      }\n    }).then(data => {\n      this.setState({\n        weatherDataByGeo: data,\n        loading: false\n      });\n    }).catch(err => {\n      console.warn('Данные не были получены, ошибка: ' + err);\n    });\n  } //функция геолокации. Определяет текущее местоположение пользователя\n\n\n  geoLocation() {\n    if (\"geolocation\" in navigator) {\n      const geo_options = {\n        enableHighAccuracy: true,\n        maximumAge: 0,\n        timeout: 27000\n      };\n\n      const geo_success = position => {\n        console.log(position.coords);\n        this.fetchDataByGeo(position.coords.latitude, position.coords.longitude);\n      };\n\n      const geo_err = err => {\n        console.log(err.code, err.message);\n        this.setState({\n          errGeo: err\n        });\n      };\n\n      navigator.geolocation.getCurrentPosition(geo_success, geo_err, geo_options);\n    } else {\n      alert('Геолакация не поддерживается вашим браузером.' + 'Используйте другой браузер или обновите ваш браузер до последней версии.');\n    }\n  } //функция валидации для поиска. Не дает добавить город, если ничего не введенно в поиск\n  //так же не дает добавить город, который уже есть в navbar\n\n\n  validate(value) {\n    const {\n      cities\n    } = this.state;\n    if (!value) return 'no value';\n\n    if (cities) {\n      for (let i = 0; i < cities.length; i++) {\n        if (cities[i].city === value.trim()) return 'duplicate';\n      }\n    }\n\n    return 'true';\n  }\n\n  handleCityClick(activeCity) {\n    this.setState({\n      activeCityId: activeCity.id,\n      errGeo: null,\n      searchErr: ''\n    });\n  }\n\n  handleInputChange(input) {\n    this.setState({\n      value: input.value\n    });\n  }\n\n  handleSearchBtnClick(event) {\n    if (event.key === 'Enter' || event.target.id === 'searchBtn') {\n      const {\n        cities,\n        value\n      } = this.state;\n      const validValue = value.slice(0, 1).toUpperCase() + value.slice(1).toLowerCase();\n      const validateResult = this.validate(validValue);\n      const citiesClone = cities.slice(); //если введеные в данные в поиск валидны, то формируем объект, который пушим в клон массива городов и изменяем состояние компонента\n\n      if (validateResult === 'true') {\n        const newCity = {\n          id: cities.length > 0 ? cities[cities.length - 1].id + 1 : 1,\n          city: validValue\n        };\n        citiesClone.push(newCity);\n        localStorage.setItem('cities', JSON.stringify(citiesClone));\n        this.setState({\n          cities: JSON.parse(localStorage.getItem('cities')),\n          activeCityId: newCity.id,\n          value: '',\n          searchErr: '',\n          errGeo: null\n        });\n      } else if (validateResult === 'duplicate') {\n        this.setState({\n          value: '',\n          searchErr: 'duplicate',\n          errGeo: null\n        });\n      } else {\n        this.setState({\n          searchErr: 'no value',\n          errGeo: null\n        });\n      }\n    }\n  }\n\n  handleDeleteCityBtnClick(deleteBtn) {\n    const {\n      cities\n    } = this.state;\n    const citiesClone = cities.slice();\n\n    for (let i = 0; i < citiesClone.length; i++) {\n      if (citiesClone[i].id === +deleteBtn.id) {\n        citiesClone.splice(i, 1);\n        localStorage.setItem('cities', JSON.stringify(citiesClone));\n      }\n    }\n\n    this.setState({\n      activeCityId: deleteBtn.id - 1,\n      cities: JSON.parse(localStorage.getItem('cities'))\n    });\n  }\n\n  handleLocationClick(e) {\n    const {\n      errGeo\n    } = this.state;\n    errGeo && this.setState({\n      errGeo: null\n    });\n    this.geoLocation();\n  }\n\n  componentDidMount() {\n    if (!localStorage.getItem('cities')) {}\n\n    this.geoLocation();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      cities,\n      weatherDataByGeo\n    } = this.state;\n\n    if (prevState.weatherDataByGeo !== weatherDataByGeo) {\n      let duplicate = false; //Сделано для того чтобы при нажатии на 'Мое местоположение' в navbar-е не дублировался город,\n      //который определен с помощью местоположения пользователя \n\n      for (let i = 0; i < cities.length; i++) {\n        if (cities[i].city === weatherDataByGeo.name) {\n          duplicate = true;\n          this.setState({\n            activeCityId: cities[i].id\n          });\n        }\n      } //Добавляет новый город в navbar, полученный из navigator.location (авто-определения местоположения \n      //или при нажатии на \"Мое местоположение\"). Город добавляется только если такого города еще нет в navbar-е\n\n\n      if (!duplicate) {\n        const citiesClone = cities.slice();\n        const newCity = {\n          id: cities.length > 0 ? cities[cities.length - 1].id + 1 : 1,\n          city: weatherDataByGeo.name\n        };\n        citiesClone.push(newCity);\n        localStorage.setItem('cities', JSON.stringify(citiesClone));\n        this.setState({\n          cities: JSON.parse(localStorage.getItem('cities')),\n          activeCityId: newCity.id\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      cities,\n      activeCityId,\n      value\n    } = this.state;\n    const {\n      weatherDataByGeo,\n      loading,\n      errGeo\n    } = this.state;\n    let activeCity;\n    cities.length && cities.forEach(item => item.id === +activeCityId ? activeCity = item.city : '');\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"header__name\",\n          children: \"\\u041F\\u0440\\u043E\\u0433\\u043D\\u043E\\u0437 \\u043F\\u043E\\u0433\\u043E\\u0434\\u044B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        value: value,\n        onChange: this.handleInputChange,\n        closeCallback: this.handleSearchBtnClick,\n        onLocationClick: this.handleLocationClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"header__line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"main-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-info\",\n          children: [/*#__PURE__*/_jsxDEV(Cities, {\n            data: cities,\n            onCityClick: this.handleCityClick,\n            activeCityId: activeCityId,\n            onDeleteCityBtnClick: this.handleDeleteCityBtnClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), //Если не идет загрузка И не возникли ошибки при геолокации И есть данные о погоде,\n          //определенные по координатам пользователя ИЛИ выбран город в navbar-e, то показывать компонент WeatherDisplay\n          !loading && !errGeo && (activeCityId || weatherDataByGeo ? /*#__PURE__*/_jsxDEV(WeatherDisplay, {\n            activeCity: activeCity,\n            weatherDataByGeo: weatherDataByGeo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-display\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"weather-display__loader\",\n              children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this)), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 26\n          }, this), errGeo && /*#__PURE__*/_jsxDEV(RequestError, {\n            errGeo: errGeo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/pasha/WebstormProjects/weathertop/src/App.js"],"names":["React","Cities","WeatherDisplay","Loader","RequestError","Modal","App","Component","constructor","props","handleCityClick","bind","handleInputChange","handleSearchBtnClick","handleDeleteCityBtnClick","handleLocationClick","validate","fetchDataByGeo","geoLocation","state","cities","localStorage","getItem","JSON","parse","activeCityId","value","searchErr","weatherDataByGeo","loading","errGeo","latitude","longitude","APPID","URL","setState","fetch","then","response","ok","json","status","data","catch","err","console","warn","navigator","geo_options","enableHighAccuracy","maximumAge","timeout","geo_success","position","log","coords","geo_err","code","message","geolocation","getCurrentPosition","alert","i","length","city","trim","activeCity","id","input","event","key","target","validValue","slice","toUpperCase","toLowerCase","validateResult","citiesClone","newCity","push","setItem","stringify","deleteBtn","splice","e","componentDidMount","componentDidUpdate","prevProps","prevState","duplicate","name","render","forEach","item"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Cities} from './components/Cities';\nimport {WeatherDisplay} from './components/WeatherDisplay';\nimport { Loader } from './components/Loader';\nimport { RequestError } from './components/RequestError';\nimport './App.css'\nimport Modal from './Modal'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCityClick = this.handleCityClick.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSearchBtnClick = this.handleSearchBtnClick.bind(this);\n    this.handleDeleteCityBtnClick = this.handleDeleteCityBtnClick.bind(this);\n    this.handleLocationClick = this.handleLocationClick.bind(this);\n    this.validate = this.validate.bind(this);\n    this.fetchDataByGeo = this.fetchDataByGeo.bind(this);\n    this.geoLocation = this.geoLocation.bind(this);\n\n    this.state = {\n      cities: localStorage.getItem('cities') ? JSON.parse( localStorage.getItem('cities') ) : [],\n      activeCityId: null,\n      value: '',\n      searchErr: '',\n      weatherDataByGeo: null,\n      loading: false,\n      errGeo: null\n    }\n  }\n\n  //Делает запрос на API по значениям координат, полученных из navigator.location\n  fetchDataByGeo(latitude, longitude) {    \n    const APPID = 'ef598dd48091a3a2eb6a63ef6c4d75b2';\n    const URL = 'https://api.openweathermap.org/data/2.5/weather?lat=' + \n          latitude + '&lon=' + longitude + `&units=metric&lang=ru&APPID=${APPID}`;\n\n    this.setState({loading: true});\n\n    fetch(URL).then(response => {\n      if (response.ok) {\n        return response.json(); \n      } else {\n        throw response.status;\n      }\n    })\n    .then(data => {\n      this.setState({\n        weatherDataByGeo: data,\n        loading: false\n      });\n    })\n    .catch(err => {\n      console.warn('Данные не были получены, ошибка: ' + err);\n    })\n  }\n\n  //функция геолокации. Определяет текущее местоположение пользователя\n  geoLocation() {\n    if(\"geolocation\" in  navigator){\n      const geo_options = {\n        enableHighAccuracy: true, \n        maximumAge        : 0, \n        timeout           : 27000\n      };\n\n      const geo_success = (position) => {\n        console.log(position.coords);\n        this.fetchDataByGeo(position.coords.latitude, position.coords.longitude)\n      }\n\n      const geo_err = (err) => {\n        console.log(err.code, err.message);\n        this.setState({errGeo: err});\n      }\n      \n      navigator.geolocation.getCurrentPosition(geo_success, geo_err, geo_options);\n\n    } else {\n      alert('Геолакация не поддерживается вашим браузером.'\n            + 'Используйте другой браузер или обновите ваш браузер до последней версии.' )\n    }\n  }\n \n  //функция валидации для поиска. Не дает добавить город, если ничего не введенно в поиск\n  //так же не дает добавить город, который уже есть в navbar\n  validate(value) {\n    const {cities} = this.state;\n    if (!value) return 'no value';\n\n    if(cities) {\n      for (let i = 0; i < cities.length; i++) {\n        if (cities[i].city === value.trim()) return 'duplicate';\n      }\n    }\n    \n    return 'true';\n  }\n\n  handleCityClick(activeCity) {\n    this.setState({activeCityId: activeCity.id, errGeo: null, searchErr: ''});\n  }\n\n  handleInputChange(input) {\n    this.setState({value: input.value});\n  }\n\n  handleSearchBtnClick(event) {\n    if (event.key === 'Enter' || event.target.id === 'searchBtn') {\n      const {cities, value} = this.state;\n      const validValue = value.slice(0,1).toUpperCase() + value.slice(1).toLowerCase();\n      const validateResult = this.validate(validValue);\n      const citiesClone = cities.slice();\n      \n      //если введеные в данные в поиск валидны, то формируем объект, который пушим в клон массива городов и изменяем состояние компонента\n      if (validateResult === 'true') {\n        const newCity = {\n          id: cities.length > 0 ? cities[cities.length-1].id + 1 : 1,\n          city: validValue\n        }\n\n        citiesClone.push(newCity);\n        localStorage.setItem('cities', JSON.stringify(citiesClone));\n        \n        this.setState({\n          cities: JSON.parse( localStorage.getItem('cities') ),\n          activeCityId: newCity.id, \n          value: '',\n          searchErr: '',\n          errGeo: null\n        });\n      } else if (validateResult === 'duplicate') {\n        this.setState({value: '', searchErr: 'duplicate', errGeo: null});\n      } else {\n        this.setState({searchErr: 'no value', errGeo: null});\n      }\n    }\n  }\n\n  handleDeleteCityBtnClick(deleteBtn) {\n    const {cities} = this.state;\n    const citiesClone = cities.slice();\n    \n    for (let i = 0; i < citiesClone.length; i++) {\n      if (citiesClone[i].id === +deleteBtn.id) {\n        citiesClone.splice(i, 1);\n        localStorage.setItem('cities', JSON.stringify(citiesClone))\n      }\n    }\n    \n    this.setState({\n      activeCityId: deleteBtn.id - 1,\n      cities: JSON.parse( localStorage.getItem('cities') )\n    });\n  }\n\n  handleLocationClick(e) {\n    const {errGeo} = this.state;\n\n    errGeo && this.setState({errGeo: null});\n    this.geoLocation();\n  }\n\n  componentDidMount() {\n    if (!localStorage.getItem('cities')) {\n      \n    }\n\n    this.geoLocation();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {cities, weatherDataByGeo} = this.state;\n\n    if (prevState.weatherDataByGeo !== weatherDataByGeo) {\n      let duplicate = false;\n\n      //Сделано для того чтобы при нажатии на 'Мое местоположение' в navbar-е не дублировался город,\n      //который определен с помощью местоположения пользователя \n      for (let i = 0; i < cities.length; i++) {\n        if (cities[i].city === weatherDataByGeo.name) {\n          duplicate = true;\n          this.setState({activeCityId: cities[i].id});\n        }\n      }\n\n      //Добавляет новый город в navbar, полученный из navigator.location (авто-определения местоположения \n      //или при нажатии на \"Мое местоположение\"). Город добавляется только если такого города еще нет в navbar-е\n      if (!duplicate) {\n        const citiesClone = cities.slice();\n        const newCity = {\n          id: cities.length > 0 ? cities[cities.length-1].id + 1 : 1,\n          city: weatherDataByGeo.name\n        }\n\n        citiesClone.push(newCity);\n        localStorage.setItem('cities', JSON.stringify(citiesClone));\n\n        this.setState({\n          cities: JSON.parse( localStorage.getItem('cities') ),\n          activeCityId: newCity.id\n        })\n      }\n      \n    }\n\n  }\n\n  render() {\n    const {cities, activeCityId, value} = this.state;\n    const {weatherDataByGeo, loading, errGeo} = this.state;\n    let activeCity;\n    \n    cities.length && cities.forEach((item) => item.id === +activeCityId ? activeCity = item.city : '')\n\n    return (\n      <React.Fragment>\n        <header className=\"header\">\n          <h1 className=\"header__name\">Прогноз погоды</h1>\n        </header>\n        <Modal\n          value={value}\n          onChange={this.handleInputChange}\n          closeCallback={this.handleSearchBtnClick}\n          onLocationClick={this.handleLocationClick}\n        />\n        <hr className=\"header__line\"></hr>\n        <main className=\"main-wrapper\">\n          \n          <div className='main-info'>\n            <Cities \n              data={cities} \n              onCityClick={this.handleCityClick} \n              activeCityId={activeCityId}\n              onDeleteCityBtnClick={this.handleDeleteCityBtnClick}\n            />\n            {\n            //Если не идет загрузка И не возникли ошибки при геолокации И есть данные о погоде,\n            //определенные по координатам пользователя ИЛИ выбран город в navbar-e, то показывать компонент WeatherDisplay\n              !loading && !errGeo && (activeCityId || weatherDataByGeo ? \n              <WeatherDisplay activeCity={activeCity} weatherDataByGeo={weatherDataByGeo}/> : \n              <div className=\"weather-display\">\n                <p className=\"weather-display__loader\">Выберите город</p>\n              </div>)\n            }\n            { loading && <Loader /> }\n            { errGeo && <RequestError errGeo={errGeo}/>}\n          </div>\n        \n        \n        </main>\n        \n\n        \n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}