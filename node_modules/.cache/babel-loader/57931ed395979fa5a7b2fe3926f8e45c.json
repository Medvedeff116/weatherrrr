{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pasha\\\\WebstormProjects\\\\weathertop\\\\src\\\\components\\\\WeatherDisplay.js\";\nimport React from 'react';\nimport { RequestError } from './RequestError';\nimport { Loader } from './Loader';\nimport '../App.css';\nimport '../Modal';\nimport Modal2 from '../Modal2'; //Компонент показывает данные о погоде в выбарнном городе\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass WeatherDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fetchData = this.fetchData.bind(this);\n    this.state = {\n      weatherData: null,\n      err: null,\n      loading: true\n    };\n  } //Запрос на API по имени выбранного города в navbar. activeCity получаем из props.\n\n\n  fetchData(activeCity) {\n    const APPID = 'ef598dd48091a3a2eb6a63ef6c4d75b2';\n    const URL = 'https://api.openweathermap.org/data/2.5/weather?q=' + activeCity + `&units=metric&lang=ru&APPID=${APPID}`;\n    this.setState({\n      loading: true\n    });\n    fetch(URL).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw response.status;\n      }\n    }).then(data => {\n      this.setState({\n        weatherData: data,\n        loading: false,\n        err: null\n      });\n    }).catch(err => {\n      console.warn('Данные не были получены, ошибка: ' + err);\n      this.setState({\n        err: err\n      });\n    });\n  } //Когда компонент примонтирован, если есть данные о погоде полученые из местоположения пользователя то\n  //компонент отображает их, в противном случае делает запрос на api по активному городу\n\n\n  componentDidMount() {\n    const {\n      activeCity,\n      weatherDataByGeo\n    } = this.props;\n    weatherDataByGeo ? this.setState({\n      weatherData: weatherDataByGeo,\n      loading: false\n    }) : this.fetchData(activeCity);\n  } //делает запрос на api, если был выбран другой город или если есть данные о погоде по местоположению то отображает их\n\n\n  componentDidUpdate(prevProps) {\n    const {\n      activeCity,\n      weatherDataByGeo\n    } = this.props;\n    prevProps.activeCity !== activeCity && this.fetchData(activeCity);\n    prevProps.weatherDataByGeo !== weatherDataByGeo && this.setState({\n      weatherData: weatherDataByGeo,\n      loading: false\n    });\n  }\n\n  render() {\n    const {\n      weatherData,\n      err,\n      loading\n    } = this.state;\n    const {\n      activeCity\n    } = this.props;\n    if (err) return /*#__PURE__*/_jsxDEV(RequestError, {\n      errStatus: err,\n      activeCity: activeCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }, this);else if (loading) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 30\n    }, this);\n    const weather = weatherData.weather[0];\n    const weatherIcon = `https://openweathermap.org/img/wn/${weather.icon}.png`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"city-status\",\n        children: [` В ${weatherData.name} ${weather.description}`, /*#__PURE__*/_jsxDEV(\"img\", {\n          src: weatherIcon,\n          alt: weather.description,\n          title: weather.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u0422\\u0435\\u043C\\u043F\\u0435\\u0440\\u0430\\u0442\\u0443\\u0440\\u0430: \", weatherData.main.temp, \"\\xB0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u041F\\u043E \\u043E\\u0449\\u0443\\u0449\\u0435\\u043D\\u0438\\u044E: \", weatherData.main.feels_like, \"\\xB0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u0412\\u0435\\u0442\\u0435\\u0440: \", weatherData.wind.speed, \" \\u043C/\\u0441\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441: \", weather.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u0414\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435: \",\n          /*перевод давления из атм в мм.рт.ст*/\n          (weatherData.main.pressure * 0.75006375541921).toFixed(2), \" \\u043C\\u043C \\u0440\\u0442. \\u0441\\u0442.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u0412\\u043B\\u0430\\u0436\\u043D\\u043E\\u0441\\u0442\\u044C: \", weatherData.main.humidity, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u041A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u044B: \", `[${weatherData.coord.lat}, ${weatherData.coord.lon}]; ${weatherData.sys.country}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"\\u0417\\u0430\\u0432\\u0442\\u0440\\u0430 \\u0432 \", weatherData.name, \" \", weather.description, \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: weatherIcon,\n          alt: weather.description,\n          title: weather.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 63\n        }, this), \"   \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u0422\\u0435\\u043C\\u043F\\u0435\\u0440\\u0430\\u0442\\u0443\\u0440\\u0430: \", weatherData.main.temp, \"\\xB0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u041F\\u043E \\u043E\\u0449\\u0443\\u0449\\u0435\\u043D\\u0438\\u044E: \", weatherData.main.feels_like, \"\\xB0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u0412\\u0435\\u0442\\u0435\\u0440: \", weatherData.wind.speed, \" \\u043C/\\u0441\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441: \", weather.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u0414\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435: \",\n          /*перевод давления из атм в мм.рт.ст*/\n          (weatherData.main.pressure * 0.75006375541921).toFixed(2), \" \\u043C\\u043C \\u0440\\u0442. \\u0441\\u0442.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u0412\\u043B\\u0430\\u0436\\u043D\\u043E\\u0441\\u0442\\u044C: \", weatherData.main.humidity, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-info__item\",\n          children: [\"\\u041A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u044B: \", `[${weatherData.coord.lat}, ${weatherData.coord.lon}]; ${weatherData.sys.country}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal2, {\n        city: weatherData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport { WeatherDisplay };","map":{"version":3,"sources":["C:/Users/pasha/WebstormProjects/weathertop/src/components/WeatherDisplay.js"],"names":["React","RequestError","Loader","Modal2","WeatherDisplay","Component","constructor","props","fetchData","bind","state","weatherData","err","loading","activeCity","APPID","URL","setState","fetch","then","response","ok","json","status","data","catch","console","warn","componentDidMount","weatherDataByGeo","componentDidUpdate","prevProps","render","weather","weatherIcon","icon","name","description","main","temp","feels_like","wind","speed","pressure","toFixed","humidity","coord","lat","lon","sys","country"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {RequestError} from './RequestError';\nimport {Loader} from './Loader';\nimport '../App.css';\nimport '../Modal'\nimport Modal2 from '../Modal2'\n\n//Компонент показывает данные о погоде в выбарнном городе\nclass WeatherDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fetchData = this.fetchData.bind(this);\n    this.state = {\n      weatherData: null,\n      err: null,\n      loading: true\n    }\n  }\n\n  //Запрос на API по имени выбранного города в navbar. activeCity получаем из props.\n  fetchData(activeCity) {\n    const APPID = 'ef598dd48091a3a2eb6a63ef6c4d75b2'\n    const URL = 'https://api.openweathermap.org/data/2.5/weather?q=' + \n                activeCity + `&units=metric&lang=ru&APPID=${APPID}`;\n\n    this.setState({loading: true});\n\n    fetch(URL).then(response => {\n      if (response.ok) {\n        return response.json(); \n      } else {\n        throw response.status\n      }\n    })\n    .then(data => {\n      this.setState({\n        weatherData: data,\n        loading: false,\n        err: null\n      });\n    })\n    .catch(err => {\n      console.warn('Данные не были получены, ошибка: ' + err);\n      this.setState({\n        err: err\n      })\n    }) \n  }\n\n  //Когда компонент примонтирован, если есть данные о погоде полученые из местоположения пользователя то\n  //компонент отображает их, в противном случае делает запрос на api по активному городу\n  componentDidMount() {\n    const {activeCity, weatherDataByGeo} = this.props;\n    \n    weatherDataByGeo ? \n    this.setState({weatherData: weatherDataByGeo, loading: false}) :\n    this.fetchData(activeCity);    \n  }\n\n  //делает запрос на api, если был выбран другой город или если есть данные о погоде по местоположению то отображает их\n  componentDidUpdate(prevProps) {\n    const {activeCity, weatherDataByGeo} = this.props;\n    \n    prevProps.activeCity !== activeCity && this.fetchData(activeCity);\n    prevProps.weatherDataByGeo !== weatherDataByGeo && this.setState({weatherData: weatherDataByGeo, loading: false});\n  }\n\n  render() {\n    const {weatherData, err, loading} = this.state;\n    const {activeCity} = this.props;\n    \n    if (err) return <RequestError errStatus={err} activeCity={activeCity}/>;\n    else if (loading) return <Loader/>;\n\n    const weather = weatherData.weather[0];\n    const weatherIcon = `https://openweathermap.org/img/wn/${weather.icon}.png`;\n    \n    return (\n      <div className=\"weather-display\">\n        <h2 className=\"city-status\">\n          {` В ${weatherData.name} ${weather.description}`}\n          <img \n            src={weatherIcon} \n            alt={weather.description} \n            title={weather.description}/>  \n        </h2>\n        <div className=\"weather-info\">\n          <p className=\"weather-info__item\">Температура: {weatherData.main.temp}°</p>\n          <p className=\"weather-info__item\">По ощущению: {weatherData.main.feels_like}°</p>\n          <p className=\"weather-info__item\">Ветер: {weatherData.wind.speed} м/с</p>\n          <p className=\"weather-info__item\">Статус: {weather.description}</p>\n          <p className=\"weather-info__item\">Давление: {\n            /*перевод давления из атм в мм.рт.ст*/\n            (weatherData.main.pressure *  0.75006375541921).toFixed(2)\n          } мм рт. ст.</p>\n          <p className=\"weather-info__item\">Влажность: {weatherData.main.humidity}%</p>\n          <p className=\"weather-info__item\">Координаты: {`[${weatherData.coord.lat}, ${weatherData.coord.lon}]; ${weatherData.sys.country}`}</p>\n        </div>\n        <h1>Завтра в {weatherData.name} {weather.description} <img \n            src={weatherIcon} \n            alt={weather.description} \n            title={weather.description}/>   </h1>\n        \n        \n        <div className=\"weather-info\">\n          <p className=\"weather-info__item\">Температура: {weatherData.main.temp}°</p>\n          <p className=\"weather-info__item\">По ощущению: {weatherData.main.feels_like}°</p>\n          <p className=\"weather-info__item\">Ветер: {weatherData.wind.speed} м/с</p>\n          <p className=\"weather-info__item\">Статус: {weather.description}</p>\n          <p className=\"weather-info__item\">Давление: {\n            /*перевод давления из атм в мм.рт.ст*/\n            (weatherData.main.pressure *  0.75006375541921).toFixed(2)\n          } мм рт. ст.</p>\n          <p className=\"weather-info__item\">Влажность: {weatherData.main.humidity}%</p>\n          \n          <p className=\"weather-info__item\">Координаты: {`[${weatherData.coord.lat}, ${weatherData.coord.lon}]; ${weatherData.sys.country}`}</p>\n          \n          \n</div>\n            <Modal2\n              city={weatherData}\n            />\n      </div>\n      \n    )\n  }\n}\n\nexport {WeatherDisplay}"]},"metadata":{},"sourceType":"module"}